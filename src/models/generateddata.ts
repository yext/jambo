import LocalizationConfig from './localizationconfig';
import PageSet from './pageset';
import PageSetsBuilder from '../commands/build/pagesetsbuilder';

/**
 * GeneratedData is a representation of the data generated by Jambo. It deals with
 * the {@link LocalizationConfig}, a group of {@link PageSet}s.
 */
export default class GeneratedData {
  private _localizationConfig: LocalizationConfig
  private _pageSets: PageSet[]

  /**
   * @param {LocalizationConfig} localizationConfig
   * @param {Array<PageSet>} pageSets
   */
  constructor(pageSets: Array<PageSet>, localizationConfig: LocalizationConfig) {
    /**
     * @type {LocalizationConfig}
     */
    this._localizationConfig = localizationConfig;

    /**
     * @type {Array<PageSet>}
     */
    this._pageSets = pageSets;
  }

  /**
   * Gets the locales configured through Jambo
   *
   * @param {String} locale
   * @returns {string[]}
   */
  getLocales() {
    return this._localizationConfig.getLocales();
  }

  /**
   * Gets the locale fallbacks
   *
   * @param {String} locale
   * @returns {string[]}
   */
  getLocaleFallbacks(locale: string) {
    return this._localizationConfig.getFallbacks(locale);
  }

  /**
   * Returns the generated pageSets
   *
   * @returns {Array<PageSet>}
   */
  getPageSets() {
    return this._pageSets;
  }

  /**
   * Builds a {@link GeneratedData} from the given configurations and
   * {@link PageTemplates}.
   *
   * @param {GlobalConfig} globalConfig
   * @param {LocalizationConfig} localizationConfig
   * @param {Array<PageConfig>} pageConfigs
   * @param {Array<PageTemplate>} pageTemplates
   * @returns {GeneratedData}
   */
  static from({ globalConfig, localizationConfig, pageConfigs, pageTemplates }: any) {
    const pageSets = new PageSetsBuilder({
      localizationConfig: localizationConfig,
      globalConfig: globalConfig,
    }).build(pageConfigs, pageTemplates);

    return new GeneratedData(pageSets, localizationConfig);
  }
}
