const ConfigLocalizer = require('../commands/build/configlocalizer');
const LocalizationConfig = require('./localizationconfig');
const PageConfig = require('./pageconfig');
const PageSet = require('./pageset');
const PageSetCreator = require('../commands/build/pagesetcreator');
const PageTemplate = require('./pagetemplate');
const TemplateLocalizer = require('../commands/build/templatelocalizer');

/**
 * GeneratedData is a representation of the data generated by Jambo, created from
 * the global config (@type {Object}), @type {LocalizationConfig}, @type {PageConfig}s,
 * and @type {PageTemplates}.
 *
 * This class handles localization of all config passed in, and all the accessors return
 * localized data.
 */
module.exports = class GeneratedData {
  constructor({ globalConfig, localizationConfig, pageConfigs, pageTemplates }) {
    /**
     * @type {Object}
     */
    this._globalConfig = globalConfig || {};

    /**
     * @type {LocalizationConfig}
     */
    this._localizationConfig = localizationConfig;

    /**
     * @type {String}
     */
    this._defaultLocale = localizationConfig.getDefaultLocale() || globalConfig.locale || '';

    /**
     * @type {Array<PageConfig>}
     */
    this._localizedPageConfigs = new ConfigLocalizer({
      localizationConfig: localizationConfig,
      defaultLocale: this._defaultLocale
    }).createLocalizedPageConfigs(pageConfigs);

    /**
     * @type {Array<PageTemplates>}
     */
    this._localizedPageTemplates = new TemplateLocalizer({
      localizationConfig: localizationConfig,
      defaultLocale: this._defaultLocale
    }).createLocalizedPageTemplates(pageTemplates);
  }

  /**
   * Returns the localized global config
   *
   * @param {String} locale
   * @returns {Object}
   */
  getGlobalConfig (locale) {
    return Object.assign({},
      this._globalConfig,
      {
        experienceKey: this._localizationConfig.getExperienceKey(locale) || this._globalConfig.experienceKey,
        apiKey: this._localizationConfig.getApiKey(locale) || this._globalConfig.apiKey,
        locale: locale || this._globalConfig.locale
      }
    );
  }

  /**
   * Gets the locales configured through Jambo
   *
   * @param {String} locale
   * @returns {Array<String>}
   */
  getLocales () {
    const locales = this._localizationConfig.getLocales();
    return locales.length ? locales : [ this._defaultLocale ];
  }


  /**
   * Gets the locale fallbacks
   *
   * @param {String} locale
   * @returns {Array<String>}
   */
  getLocaleFallbacks (locale) {
    return this._localizationConfig.getFallbacks(locale);
  }

  /**
   * Gets the page config set for a given locale
   *
   * @param {String} locale
   * @returns {Array<PageConfig>}
   */
  getPageConfigs (locale) {
    return this._localizedPageConfigs.filter(config => config.getLocale() === locale);
  }

  /**
   * Gets the page template set for a given locale
   *
   * @param {String} locale
   * @returns {Array<PageTemplate>}
   */
  getPageTemplates (locale) {
    return this._localizedPageTemplates.filter(template => template.getLocale() === locale);
  }

  /**
   * Builds the PageSet for the given locale
   *
   * @param {String} locale
   * @returns {PageSet}
   */
  buildPageSet (locale) {
    return new PageSetCreator({
      locale: locale,
      params: this._localizationConfig.getParams(locale),
      globalConfig: this.getGlobalConfig(locale),
    }).create({
      pageConfigs: this.getPageConfigs(locale),
      pageTemplates: this.getPageTemplates(locale),
      urlFormatter: this._localizationConfig.getUrlFormatter(locale),
    });
  }
}
