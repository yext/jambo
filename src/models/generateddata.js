const { LocalizationConfig } = require('./localizationconfig');
const { PageConfig } = require('./pageconfig');
const { PageTemplate } = require('./pagetemplate');
const { PageSet } = require('./pageset');
const { PageBuilder } = require('../commands/build/pagebuilder');
const { ConfigLocalizer } = require('../commands/build/configlocalizer');

/**
 * Data model for the data generated by Jambo, aggregated from configs and PageTemplates.
 */
exports.GeneratedData = class {
  constructor({ pageTemplates, globalConfig, localizationConfig, pageConfigs }) {
    /**
     * @type {Array<PageTemplate>}
     */
    this.pageTemplates = pageTemplates;

    /**
     * @type {Object}
     */
    this.globalConfig = globalConfig || {};

    /**
     * @type {LocalizationConfig}
     */
    this.localizationConfig = localizationConfig;

    this.defaultLocale = localizationConfig.getDefaultLocale() || globalConfig.locale || '';

    /**
     * @type {Array<PageConfig>}
     */
    this.localizedPageConfigs = new ConfigLocalizer({
      localizationConfig: localizationConfig,
      defaultLocale: this.defaultLocale
    }).localize(pageConfigs);
  }

  /**
   * Returns the localized global config
   *
   * @param {String} locale
   * @returns {Object}
   */
  getGlobalConfig (locale) {
    return Object.assign({},
      this.globalConfig,
      {
        experienceKey: this.localizationConfig.getExperienceKey(locale) || this.globalConfig.experienceKey,
        apiKey: this.localizationConfig.getApiKey(locale) || this.globalConfig.apiKey,
        locale: locale || this.globalConfig.locale
      }
    );
  }

  /**
   * Gets the locales configured through Jambo
   *
   * @param {String} locale
   * @returns {Array<String>}
   */
  getLocales () {
    const locales = this.localizationConfig.getLocales();
    return locales.length ? locales : [ this.defaultLocale ];
  }

  /**
   * Gets the vertical config set for a given locale
   *
   * @param {String} locale
   * @returns {Object}
   */
  getPageConfigs (locale) {
    // TODO default locale + other complications?
    return this.localizedPageConfigs.filter((pageConfig) => pageConfig.getLocale() === locale);
  }

  /**
   * Builds the PageSet for the given locale
   *
   * @param {String} locale
   * @returns {PageSet}
   */
  buildPageSet (locale) {
    const pages = new PageBuilder({
      locale: locale,
      pageTemplates: this.pageTemplates,
      pageNameToConfig: this.getPageConfigs(locale),
      localeFallbacks: this.localizationConfig.getFallbacks(locale),
      urlFormatter: this.localizationConfig.getUrlFormatter(locale),
    }).build();

    return new PageSet({
      pages: pages,
      params: this.localizationConfig.getParams(locale),
      globalConfig: this.getGlobalConfig(locale),
    });
  }
}
