const GlobalConfig = require('./globalconfig');
const GlobalConfigLocalizer = require('../commands/build/globalconfiglocalizer');
const LocalizationConfig = require('./localizationconfig');
const PageConfig = require('./pageconfig');
const PageLocalizer = require('../commands/build/pagelocalizer');
const PageSet = require('./pageset');
const PageTemplate = require('./pagetemplate');

/**
 * GeneratedData is a representation of the data generated by Jambo. It understands
 * the @type {GlobalConfig}, @type {LocalizationConfig}, a group of @type {Page}s.
 */
module.exports = class GeneratedData {
  /**
   * @param {GlobalConfig} globalConfig
   * @param {LocalizationConfig} localizationConfig
   * @param {Array<Page>} pages
   * @param {String} defaultLocale
   */
  constructor({ localizedGlobalConfigs, localizationConfig, pages, defaultLocale }) {
    /**
     * @type {Array<GlobalConfig>}
     */
    this._localizedGlobalConfigs = localizedGlobalConfigs;

    /**
     * @type {LocalizationConfig}
     */
    this._localizationConfig = localizationConfig;

    /**
     * @type {String}
     */
    this._defaultLocale = defaultLocale;

    /**
     * @type {Array<Page>}
     */
    this._pages = pages;
  }

  /**
   * Gets the locales configured through Jambo
   *
   * @param {String} locale
   * @returns {Array<String>}
   */
  getLocales () {
    const locales = this._localizationConfig.getLocales();
    return locales.length ? locales : [ this._defaultLocale ];
  }

  /**
   * Gets the locale fallbacks
   *
   * @param {String} locale
   * @returns {Array<String>}
   */
  getLocaleFallbacks (locale) {
    return this._localizationConfig.getFallbacks(locale);
  }

  /**
   * Gets pages for locale
   *
   * @param {String} locale
   * @returns {Array<Page>}
   */
  getPages (locale) {
    return this._pages.filter(page => page.getLocale() === locale);
  }

  /**
   * Gets pages for locale
   *
   * @param {String} locale
   * @returns {Array<Page>}
   */
  getGlobalConfig (locale) {
    return this._localizedGlobalConfigs.find(globalConfig => globalConfig.getLocale() === locale);
  }

  /**
   * Builds the PageSet for the given locale
   *
   * @param {String} locale
   * @returns {PageSet}
   */
  buildPageSet (locale) {
    return new PageSet({
      pages: this.getPages(locale),
      params: this._localizationConfig.getParams(locale),
      globalConfig: this.getGlobalConfig(locale),
    });
  }

  /**
   * @param {GlobalConfig} globalConfig
   * @param {LocalizationConfig} localizationConfig
   * @param {Array<PageConfig>} pageConfigs
   * @param {Array<PageTemplate>} pageTemplates
   */
  static from({ globalConfig, localizationConfig, pageConfigs, pageTemplates }) {
    const defaultLocale = localizationConfig.getDefaultLocale() || globalConfig.getLocale() || '';

    const localizedGlobalConfigs = new GlobalConfigLocalizer(localizationConfig)
      .generateLocalizedGlobalConfigs(globalConfig);

    const pages = new PageLocalizer({
      localizationConfig: localizationConfig,
      defaultLocale: defaultLocale
    }).generateLocalizedPages(pageConfigs, pageTemplates);

    return new GeneratedData({
      pages: pages,
      localizedGlobalConfigs: localizedGlobalConfigs,
      localizationConfig: localizationConfig,
      defaultLocale: defaultLocale
    })
  }
}
